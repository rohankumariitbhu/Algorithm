#include<bits/stdc++.h>
#define ll long long int
using namespace std;
ll seg[4000];
	ll arr[4000];

ll lazy[4000];
void build(ll node,ll low,ll high)
{
	if(low==high)
	{
		seg[node]=arr[low];
		return;
		
		
	}
	ll mid=(low+high)/2;
	
	build(2*node+1,low,mid);
	build(2*node+2,mid+1,high);
	seg[node]=seg[2*node+1]+seg[2*node+2];
	
	
}

void update(ll node,ll low,ll high,ll l,ll r,ll diff)
{
	if(lazy[node]!=0)
	{
		
		seg[node]+=lazy[node]*(high-low+1);
		
		if(low!=high)
		{
			lazy[2*node+1]+=lazy[node];
			lazy[2*node+2]+=lazy[node];
			
		}
		lazy[node]=0;
		
		
	}
	if(l>high||r<low)
	return;
	
	if(low>high)
	return;
	
	if(low>=l&&high<=r)
	{
		seg[node]+=(high-low+1)*(diff);
		
		if(low!=high)
		{
			lazy[2*node+1]+=diff;
			lazy[2*node+2]+=diff;
			
		}
		return;
		
	}
	ll mid=(low+high)>>1;
	
	update(2*node+1,low,mid,l,r,diff);
	
	update(2*node+2,mid+1,high,l,r,diff);
	
	seg[node]=seg[2*node+1]+seg[2*node+2];
	
	
	
}

ll sum(ll node,ll low,ll high,ll l,ll r)
{
		if(lazy[node]!=0)
	{
		
		seg[node]+=lazy[node]*(high-low+1);
		
		if(low!=high)
		{
			lazy[2*node+1]+=lazy[node];
			lazy[2*node+2]+=lazy[node];
			
		}
		lazy[node]=0;
		
		
	}
		if(l>high||r<low)
	return 0;
	
	if(low>high)
	return 0;
	
	if(low>=l&&high<=r)
	return seg[node];
	
	ll mid=(low+high)>>1;
	
	return sum(2*node+1,low,mid,l,r)+sum(2*node+2,mid+1,high,l,r);
	
	
}



int main()
{
	ll n,i,j,q;
	cin>>n;
    memset(lazy,0,sizeof(lazy));
	
	for(i=0;i<n;i++)
	{
		cin>>arr[i];
	}
	
	build(0,0,n-1);
	cin>>q;
	while(q--)
	{
		ll type,l,r;
		cin>>type>>l>>r;
	
	
	
	if(type==1)
	{
		ll diff;
		cin>>diff;
			update(0,0,n-1,l,r,diff);
	}

	else
	cout<<sum(0,0,n-1,l,r)<<endl;
}

	
	
}
